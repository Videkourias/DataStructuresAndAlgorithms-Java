public static Entry<String, Integer> count_ARRAY(String[] tokens) {
	int CAPACITY = 100000000;					//1 op
	String[] words = new String[CAPACITY]; 				//1 op
	int[] counts = new int[CAPACITY]; 				//1 op
	for (int j = 0; j < tokens.length; j++) {			//3N ops
		String token = tokens[j];				//2N ops
		for (int i = 0; i < CAPACITY; i++) { 			//2n^2 ops
			if (words[i] == null) {  			//2n^2 ops 
				words[i] = token; 			//0 to 2n^2
				counts[i] = 1;				//0 to 2n^2
				break;
			} else if (words[i].equals(token))		//0 to 2n^2
				counts[i] = counts[i] + 1;		//0 to 2n^2
		}
	}


	int maxCount = 0; 
	String maxWord = "";
	for (int i = 0; i < CAPACITY & words[i] != null; i++) { 	//This loop has a lower complexity than the above algorithm, therefore irrelevant at high n values
		if (counts[i] > maxCount) {
		maxWord = words[i];
		maxCount = counts[i];
		}
	}
	return new AbstractMap.SimpleEntry<String, Integer>(maxWord, maxCount);
}

Worst Case: 1 + 1 + 1 + 3n + 2n + 2n^2 + 2n^2 + 2n^2 + 2n^2
8n^2 + 5n + 3 >= c * g(n^2)
when c = 21 and n0 = 1 

Therefore this algorithm is O(n^2)







public static Entry<String, Integer> count_LINKED_LIST(String[] tokens) {
	LinkedList<Entry<String, Integer>> list = new LinkedList<Entry<String, Integer>>(); 	//1 op
	for (int j = 0; j < tokens.length; j++) {						//3n ops
		String word = tokens[j];							//2n ops
		boolean found = false;								//n ops
		for (int i = 0; i < list.size(); i++) {						//3n^2 ops 
			Entry<String, Integer> e = list.get(i);					//n^3 ops

			if (word.equals(e.getKey())) {						//2n^2 ops
				e.setValue(e.getValue() + 1);					//0 to 2n^2 ops
				list.set(i, e);							//0 to n^2 ops
				found = true;							//0 to n^2 ops
				break;
			}
		}
		if (!found)									//n ops
			list.add(new AbstractMap.SimpleEntry<String, Integer>(word, 1));	//0 to n ops
	}



	int maxCount = 0;
	String maxWord = "";
	for (int i = 0; i < list.size(); i++) {							//This loop is of lower degree than the above loop, irrelevant at high n value
		int count = list.get(i).getValue();
		if (count > maxCount) {
			maxWord = list.get(i).getKey();
			maxCount = count;
		}
	}
	return new AbstractMap.SimpleEntry<String, Integer>(maxWord, maxCount);
}


Worst Case: 1 + 3n + 2n + n + 3n^2 + n^3 + 2n^2 + 2n^2 + n^2 + n^2 + n
n^3 + 9n^2 + 7n + 1 >= c * g(n^3)
when c = 18 and n0 = 1

Therefore this algorithm is O(n^3)

